let hd m = 
match m with
| x::xs -> x

let rec map l f = 
  match l with 
  | [] -> []
  | x::xs -> f x :: map xs f

let rec zip f l1 l2 = 
match l1,l2 with 
| [],[] -> []
| x::xs, y::ys -> f (x,y) :: zip f xs ys

let rec transpose_help m i = 
  match m with
  | [] -> i
  | r::rs -> 
    let res = transpose_help rs i in 
    zip (fun (x,row) -> x::row) r res
    
let transpose m = transpose_help m (map (hd m) (fun _ -> []))
    
let dot l1 l2 = zip (fun (x,y) -> x * y) l1 l2

let rec mult m1 m2 = 
let m2' = transpose m2 in 
match m1 with
| [] -> []
| r::rs -> 
  let r' = map m2' (dot r) in 
  r' :: (mult rs m2) 
  

;;
let m1 = [[1;2;3];[4;5;6]] in 
let m2 = [[1;2];[3;4];[5;6]] in 
transpose m1


